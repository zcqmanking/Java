/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.weshare.struts.action;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.URLEncoder;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.weshare.beans.School;
import com.weshare.beans.Share;
import com.weshare.beans.ShareLog;
import com.weshare.beans.SharePhoto;
import com.weshare.beans.Users;
import com.weshare.jdbc.dbconn.DBManager;
import com.weshare.struts.form.ListForm;
import com.weshare.util.Config;
import com.weshare.util.Tools;

/**
 * MyEclipse Struts Creation date: 10-07-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/list" name="listForm" input="home.do" parameter="k"
 *                scope="request" validate="true"
 * @struts.action-forward name="activeList" path="/activeList.jsp"
 * @struts.action-forward name="LogPic" path="/logPicList.jsp"
 */
public class ListAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/**
	 * 获取指定用户发起的所有活动
	 */
	public ActionForward s(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ListForm listForm = (ListForm) form;
		int curId = listForm.getUid();
		HttpSession session = request.getSession();
		int loginId = (Integer) session.getAttribute("curUserId");
		int owner = 0; // 当前用户和登陆用户是同一个人
		if (curId == loginId) {
			owner = 1;
		}
		Timestamp timeTmp;
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd",
				new Locale("zh", "cn"));
		SimpleDateFormat fullDateFormat = new SimpleDateFormat(
				"yyyy-MM-dd HH:mm:ss", new Locale("zh", "cn"));
		String sql = "select top 10 ShareID,StartDate,Title,AddTime,JoinCount,ViewCount,CommentCount from Share where UserID=";
		sql += curId;
		sql += " order by AddTime desc";
		DBManager db = new DBManager();
		getPersonalInfo(db, request, curId);
		ResultSet userRs = db.doQuery(sql);
		List<Share> shares = new ArrayList<Share>();
		int lastId = 0;
		try {
			while (userRs.next()) {
				Share s = new Share();
				s.setId(userRs.getInt("ShareID"));
				lastId = s.getId();
				timeTmp = userRs.getTimestamp("StartDate");
				String StartDate = dateFormat.format(timeTmp);
				s.setStartDate(StartDate);

				s.setTitle(userRs.getString("Title"));

				String addTime;
				String nowTime;
				Timestamp now = new Timestamp(System.currentTimeMillis());
				timeTmp = userRs.getTimestamp("AddTime");
				addTime = fullDateFormat.format(timeTmp);
				nowTime = fullDateFormat.format(now);
				addTime = Tools.getDate(addTime, nowTime);
				s.setAddTime(addTime);

				s.setJoinCount(userRs.getInt("JoinCount"));
				s.setViewCount(userRs.getInt("ViewCount"));
				s.setCommentCount(userRs.getInt("CommentCount"));

				shares.add(s);
			}
		} catch (SQLException e) {

		}
		request.setAttribute("shares", shares);
		request.setAttribute("lastShareId", lastId);
		request.setAttribute("owner", owner);
		return mapping.findForward("shareList");
	}

	//结果格式：[[[活动ID,活动开始时间,活动标题,活动发布时间,活动参加人数,活动围观人数,活动评论人数],[],[]],[最后一条记录ID],[已经没有结果flag]]
	public ActionForward sNextPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ListForm listForm = (ListForm) form;
		int curId = listForm.getUid();
		int lastId = listForm.getLastShareId();
		Timestamp timeTmp;
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd",
				new Locale("zh", "cn"));
		SimpleDateFormat fullDateFormat = new SimpleDateFormat(
				"yyyy-MM-dd HH:mm:ss", new Locale("zh", "cn"));
		
		String sql = "";
		if(listForm.getReqType().equals("s")){
			sql = "select top 10 ShareID,StartDate,Title,AddTime,JoinCount,ViewCount,CommentCount from Share where UserID=";
			sql += curId;
			sql += " and ShareID<";
			sql += lastId;
			sql += " order by AddTime desc";
		}else if(listForm.getReqType().equals("j")){
			sql = "select top 10 Share.ShareID,Share.StartDate,Share.Title,Share.AddTime,Share.JoinCount,"
				+ "Share.ViewCount,Share.CommentCount "
				+ "from [Join] right join Share on ([Join].ShareID=Share.ShareID) where [Join].UserID=";
			sql += curId;
			sql += " and [Join].ShareID<";
			sql += lastId;
			sql += " order by Share.AddTime desc";
		}else if(listForm.getReqType().equals("v")){
			sql = "select top 10 Share.ShareID,Share.StartDate,Share.Title,Share.AddTime,Share.JoinCount,"
				+ "Share.ViewCount,Share.CommentCount "
				+ "from [View] right join Share on ([View].ShareID=Share.ShareID) where [View].UserID=";
			sql += curId;
			sql += " and [View].ShareID<";
			sql += lastId;
			sql += " order by Share.AddTime desc";
		}else{
			return null;
		}
		DBManager db = new DBManager();
		ResultSet userRs = db.doQuery(sql);
		try {
			PrintWriter out = response.getWriter();
			out.print("[");
			out.print("[");
			boolean first = true;
			int cnt = 0;
			while (userRs.next()) {
				if(first != true){
					out.print(",");
				}
				first = false;
				out.print("[\"");
				out.print(userRs.getInt("ShareID"));
				lastId = userRs.getInt("ShareID");
				timeTmp = userRs.getTimestamp("StartDate");
				String StartDate = dateFormat.format(timeTmp);
				out.print("\",\"");
				out.print(StartDate);

				out.print("\",\"");
				out.print(URLEncoder.encode(userRs.getString("Title"),"UTF-8"));

				String addTime;
				String nowTime;
				Timestamp now = new Timestamp(System.currentTimeMillis());
				timeTmp = userRs.getTimestamp("AddTime");
				addTime = fullDateFormat.format(timeTmp);
				nowTime = fullDateFormat.format(now);
				addTime = Tools.getDate(addTime, nowTime);
				out.print("\",\"");
				out.print(addTime);

				out.print("\",\"");
				out.print(userRs.getInt("JoinCount"));
				out.print("\",\"");
				out.print(userRs.getInt("ViewCount"));
				out.print("\",\"");
				out.print(userRs.getInt("CommentCount"));
				
				out.print("\"]");
				
				cnt++;
			}
			
			out.print("]");
			out.print(",\"");
			out.print(lastId);
			out.print("\",\"");
			if(cnt<10){
				out.print("0");	//没有更多了
			}else{
				out.print("1");
			}
			out.print("\"]");
		} catch (SQLException e) {

		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 获取指定用户参与的所有活动
	 */
	public ActionForward j(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ListForm listForm = (ListForm) form;
		int curId = listForm.getUid();
		HttpSession session = request.getSession();
		int loginId = (Integer) session.getAttribute("curUserId");
		int owner = 0; // 当前用户和登陆用户是同一个人
		if (curId == loginId) {
			owner = 1;
		}
		Timestamp timeTmp;
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd",
				new Locale("zh", "cn"));
		SimpleDateFormat fullDateFormat = new SimpleDateFormat(
				"yyyy-MM-dd HH:mm:ss", new Locale("zh", "cn"));
		String sql = "select top 10 Share.ShareID,Share.StartDate,Share.Title,Share.AddTime,Share.JoinCount,"
				+ "Share.ViewCount,Share.CommentCount "
				+ "from [Join] right join Share on ([Join].ShareID=Share.ShareID) where [Join].UserID=";
		sql += curId;
		sql += " order by Share.AddTime desc";
		DBManager db = new DBManager();
		getPersonalInfo(db, request, curId);
		ResultSet userRs = db.doQuery(sql);
		List<Share> joins = new ArrayList<Share>();
		int lastId = 0;
		try {
			while (userRs.next()) {
				Share s = new Share();
				s.setId(userRs.getInt("ShareID"));
				lastId = s.getId();
				timeTmp = userRs.getTimestamp("StartDate");
				String StartDate = dateFormat.format(timeTmp);
				s.setStartDate(StartDate);

				s.setTitle(userRs.getString("Title"));

				String addTime;
				String nowTime;
				Timestamp now = new Timestamp(System.currentTimeMillis());
				timeTmp = userRs.getTimestamp("AddTime");
				addTime = fullDateFormat.format(timeTmp);
				nowTime = fullDateFormat.format(now);
				addTime = Tools.getDate(addTime, nowTime);
				s.setAddTime(addTime);

				s.setJoinCount(userRs.getInt("JoinCount"));
				s.setViewCount(userRs.getInt("ViewCount"));
				s.setCommentCount(userRs.getInt("CommentCount"));

				joins.add(s);
			}
		} catch (SQLException e) {

		}
		request.setAttribute("joins", joins);
		request.setAttribute("owner", owner);
		request.setAttribute("lastShareId", lastId);
		return mapping.findForward("joinList");
	}

	/**
	 * 获取指定用户围观的所有活动
	 */
	public ActionForward v(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ListForm listForm = (ListForm) form;
		int curId = listForm.getUid();
		HttpSession session = request.getSession();
		int loginId = (Integer) session.getAttribute("curUserId");
		int owner = 0; // 当前用户和登陆用户是同一个人
		if (curId == loginId) {
			owner = 1;
		}
		Timestamp timeTmp;
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd",
				new Locale("zh", "cn"));
		SimpleDateFormat fullDateFormat = new SimpleDateFormat(
				"yyyy-MM-dd HH:mm:ss", new Locale("zh", "cn"));
		String sql = "select top 10 Share.ShareID,Share.StartDate,Share.Title,Share.AddTime,Share.JoinCount,"
				+ "Share.ViewCount,Share.CommentCount "
				+ "from [View] right join Share on ([View].ShareID=Share.ShareID) where [View].UserID=";
		sql += curId;
		sql += " order by Share.AddTime desc";
		DBManager db = new DBManager();
		getPersonalInfo(db, request, curId);
		ResultSet userRs = db.doQuery(sql);
		List<Share> views = new ArrayList<Share>();
		int lastId = 0;
		try {
			while(userRs.next()){
				Share s = new Share();
				s.setId(userRs.getInt("ShareID"));
				lastId = s.getId();
				timeTmp = userRs.getTimestamp("StartDate");
				String StartDate = dateFormat.format(timeTmp);
				s.setStartDate(StartDate);

				s.setTitle(userRs.getString("Title"));
				
				String addTime;
				String nowTime;
				Timestamp now = new Timestamp(System.currentTimeMillis());
				timeTmp = userRs.getTimestamp("AddTime");
				addTime = fullDateFormat.format(timeTmp);
				nowTime = fullDateFormat.format(now);
				addTime = Tools.getDate(addTime, nowTime);
				s.setAddTime(addTime);
				
				s.setJoinCount(userRs.getInt("JoinCount"));
				s.setViewCount(userRs.getInt("ViewCount"));
				s.setCommentCount(userRs.getInt("CommentCount"));
				
				views.add(s);
			}
		} catch (SQLException e) {
			
		}
		request.setAttribute("views", views);
		request.setAttribute("owner", owner);
		request.setAttribute("lastShareId", lastId);
		return mapping.findForward("viewList");
	}

	/**
	 * 获取用于发表的所有日志
	 */
	public ActionForward l(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ListForm listForm = (ListForm) form;
		String sql = "";
		String order = "order by UpdateTime desc";
		sql += "SLID,Title,[Content],UpdateTime from ShareLog where UserID=";
		sql += listForm.getUid();
		sql = Tools.getPageSql(sql, 1, order, Config.LOG_PAGE_SIZE);
		DBManager db = new DBManager();
		getPersonalInfo(db, request, listForm.getUid());
		ResultSet rs = db.doQuery(sql);
		List<ShareLog> logs = new ArrayList<ShareLog>();
		Timestamp timeTmp;
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd",
				new Locale("zh", "cn"));
		try {
			while (rs.next()) {
				ShareLog sl = new ShareLog();
				sl.setSlId(rs.getInt("SLID"));
				sl.setTitle(rs.getString(("Title")));

				String content = rs.getString("Content");
				if (content.length() > Config.LOG_SHOW_MAX) {
					content = content.substring(0, Config.LOG_SHOW_MAX)
							+ Config.LOG_SHOW_SYMBOL;
				}
				sl.setContent(content);

				timeTmp = rs.getTimestamp("UpdateTime");
				String updateTime = dateFormat.format(timeTmp);
				sl.setUpdateTime(updateTime);

				logs.add(sl);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		request.setAttribute("logs", logs);
		return mapping.findForward("log");
	}

	/**
	 * 获取用于上传的所有照片
	 */
	public ActionForward p(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ListForm listForm = (ListForm) form;
		String sql = "";
		String order = "order by SharePhoto.UpdateTime desc";
		sql += "SharePhoto.SPID,SharePhoto.Title as spTitle,SharePhoto.PhotoURL,SharePhoto.UpdateTime,"
				+ "Share.Title as sTitle from SharePhoto left join Share "
				+ "on (SharePhoto.ShareID=Share.ShareID) where SharePhoto.UserID=";
		sql += listForm.getUid();
		sql += " and SharePhoto.IndexPic=1";
		sql = Tools.getPageSql(sql, 1, order, Config.LOG_PAGE_SIZE);
		DBManager db = new DBManager();
		getPersonalInfo(db, request, listForm.getUid());
		ResultSet rs = db.doQuery(sql);
		List<SharePhoto> photoes = new ArrayList<SharePhoto>();
		Timestamp timeTmp;
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd",
				new Locale("zh", "cn"));
		try {
			while (rs.next()) {
				SharePhoto sp = new SharePhoto();
				sp.setSpId(rs.getInt("SPID"));
				sp.setTitle(rs.getString("spTitle"));
				sp.setPhotoURL(rs.getString("PhotoURL"));

				timeTmp = rs.getTimestamp("UpdateTime");
				String updateTime = dateFormat.format(timeTmp);
				sp.setUpdateTime(updateTime);

				Share s = new Share();
				s.setTitle(rs.getString("sTitle"));
				sp.setShare(s);

				photoes.add(sp);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		request.setAttribute("photoes", photoes);
		return mapping.findForward("pic");
	}

	/**
	 * 获取个人信息
	 * 
	 * @param db
	 * @param request
	 * @param curId
	 *            用户ID
	 */
	public void getPersonalInfo(DBManager db, HttpServletRequest request,
			int curId) {
		ResultSet userRs;
		String sql = "";
		HttpSession session = request.getSession();
		int curUserId = 0;
		if (session.getAttribute("curUserId") != null) {
			curUserId = (Integer) session.getAttribute("curUserId");
		}
		int owner = 0; // 是否是登陆用户的页面，0，不是，1，是。
		if (curUserId == curId) {
			owner = 1;
		}
		request.setAttribute("owner", owner);

		// 读取该用户信息
		try {
			sql = "select UserID,UserName,Photo,Users.SchoolID,SchoolName "
					+ "from Users left join School on (Users.SchoolID = School.SchoolID) where UserID="
					+ curId;
			userRs = db.doQuery(sql);
			if (userRs.next()) {
				Users users = new Users();
				users.setUserId(userRs.getInt("UserID"));
				users.setUserName(userRs.getString("UserName"));
				users.setPhoto(userRs.getString("Photo"));
				School school = new School();
				school.setId(userRs.getInt("SchoolID"));
				school.setSchoolName(userRs.getString("SchoolName"));
				users.setSchool(school);
				request.setAttribute("user", users);
			}
		} catch (SQLException e) {

		}

		// 读取个人参加活动的总数
		int sCnt = 0, jCnt = 0, vCnt = 0;
		sql = "select count(Share.ShareID) sCnt from Share where Share.UserID=";
		sql += curId;
		userRs = db.doQuery(sql);
		try {
			if (userRs.next()) {
				sCnt = userRs.getInt("sCnt");
			}
		} catch (SQLException e) {
		}
		request.setAttribute("sCnt", sCnt);
		sql = "select count([Join].ShareID) jCnt from [Join] where [Join].UserID=";
		sql += curId;
		userRs = db.doQuery(sql);
		try {
			if (userRs.next()) {
				jCnt = userRs.getInt("jCnt");
			}
		} catch (SQLException e) {
		}
		request.setAttribute("jCnt", jCnt);
		sql = "select count([View].ShareID) vCnt from [View] where [View].UserID=";
		sql += curId;
		userRs = db.doQuery(sql);
		try {
			if (userRs.next()) {
				vCnt = userRs.getInt("vCnt");
			}
		} catch (SQLException e) {
		}
		request.setAttribute("vCnt", vCnt);
	}
}