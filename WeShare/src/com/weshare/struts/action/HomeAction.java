/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.weshare.struts.action;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.weshare.beans.FavLocation;
import com.weshare.beans.School;
import com.weshare.beans.Share;
import com.weshare.beans.ShareLog;
import com.weshare.beans.SharePhoto;
import com.weshare.beans.Users;
import com.weshare.jdbc.dbconn.DBManager;
import com.weshare.struts.form.HomeForm;
import com.weshare.util.Config;
import com.weshare.util.Tools;

/** 
 * MyEclipse Struts
 * Creation date: 09-28-2011
 * 
 * XDoclet definition:
 * @struts.action path="/home" name="homeForm" input="/login.jsp" scope="request" validate="true"
 * @struts.action-forward name="fail" path="/homeErr.jsp"
 * @struts.action-forward name="success" path="/home.jsp"
 */
public class HomeAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HomeForm homeForm = (HomeForm) form;
		ActionForward af = new ActionForward();
		Timestamp timeTmp;
		SimpleDateFormat dateFormat = new SimpleDateFormat(
				"yyyy-MM-dd", new Locale("zh", "cn"));
		SimpleDateFormat fullDateFormat = new SimpleDateFormat(
				"yyyy-MM-dd HH:mm:ss", new Locale("zh", "cn"));
		SimpleDateFormat monthDateFormat = new SimpleDateFormat(
				"yyyy-MM", new Locale("zh", "cn"));
		DBManager db = new DBManager();
		ResultSet userRs;
		String sql = "";
		int curId = homeForm.getId();
		HttpSession session = request.getSession();
		int curUserId = (Integer)session.getAttribute("curUserId");
		int owner = 0; //是否是登陆用户的页面，0，不是，1，是。
		if (curUserId == curId){
			owner = 1;
		}
		request.setAttribute("owner", owner);

		//读取该用户信息
		try {
			sql = "select UserID,UserName,Photo,Users.SchoolID,SchoolName " +
					"from Users left join School on (Users.SchoolID = School.SchoolID) where UserID="
					+ curId;
			userRs = db.doQuery(sql);
			if (userRs.next()) {
				Users users = new Users();
				users.setUserId(userRs.getInt("UserID"));
				users.setUserName(userRs.getString("UserName"));
				users.setPhoto(userRs.getString("Photo"));
				School school = new School();
				school.setId(userRs.getInt("SchoolID"));
				school.setSchoolName(userRs.getString("SchoolName"));
				users.setSchool(school);
				request.setAttribute("user", users);
			}
		} catch (SQLException e) {
			
		}
		
		//读取个人参加活动的总数
		int sCnt = 0,jCnt = 0,vCnt = 0;
		sql = "select count(Share.ShareID) sCnt from Share where Share.UserID=";
		sql += curId;
		userRs = db.doQuery(sql);
		try {
			if(userRs.next()){
				sCnt = userRs.getInt("sCnt");
			}
		} catch (SQLException e) {
		}
		request.setAttribute("sCnt", sCnt);
		sql = "select count([Join].ShareID) jCnt from [Join] where [Join].UserID=";
		sql += curId;
		userRs = db.doQuery(sql);
		try {
			if(userRs.next()){
				jCnt = userRs.getInt("jCnt");
			}
		} catch (SQLException e) {
		}
		request.setAttribute("jCnt", jCnt);
		sql = "select count([View].ShareID) vCnt from [View] where [View].UserID=";
		sql += curId;
		userRs = db.doQuery(sql);
		try {
			if(userRs.next()){
				vCnt = userRs.getInt("vCnt");
			}
		} catch (SQLException e) {
		}
		request.setAttribute("vCnt", vCnt);
		
		//读取想去的地方
		//Status=0时是未实现的，Status=1是已经实现的
		sql = "select FLID,FavLocation,UserID,Longitude,Latitude,UpdateTime,Status " +
				"from FavLocation where UserID=";
		sql += curId;
		sql += " and Status=0 order by UpdateTime desc";
		userRs = db.doQuery(sql);
		List<FavLocation> favs = new ArrayList<FavLocation>();
		try {
			while(userRs.next()){
				FavLocation f = new FavLocation();
				f.setFlId(userRs.getInt("FLID"));
				f.setFavLocation(userRs.getString("FavLocation"));
				f.setLongitude(userRs.getString("Longitude"));
				f.setLatitude(userRs.getString("Latitude"));
				f.setStatus(userRs.getInt("Status"));
				
				timeTmp = userRs.getTimestamp("UpdateTime");
				f.setUpdateTime(fullDateFormat.format(timeTmp));
				
				f.setUserId(userRs.getInt("UserID"));
				favs.add(f);
			}
		} catch (SQLException e) {
			FavLocation f = new FavLocation();
			favs.add(f);
		}
		request.setAttribute("favs", favs);
		
		//读取我最近的发起
		//暂定Top3
		sql = "select top 3 ShareID,StartDate,Title,AddTime,JoinCount,ViewCount,CommentCount from Share where UserID=";
		sql += curId;
		sql += " order by AddTime desc";
		userRs = db.doQuery(sql);
		List<Share> shares = new ArrayList<Share>();
		try {
			while(userRs.next()){
				Share s = new Share();
				s.setId(userRs.getInt("ShareID"));
				timeTmp = userRs.getTimestamp("StartDate");
				String StartDate = dateFormat.format(timeTmp);
				s.setStartDate(StartDate);
				
				s.setTitle(userRs.getString("Title"));

				String addTime;
				String nowTime;
				Timestamp now = new Timestamp(System.currentTimeMillis());
				timeTmp = userRs.getTimestamp("AddTime");
				addTime = fullDateFormat.format(timeTmp);
				nowTime = fullDateFormat.format(now);
				addTime = Tools.getDate(addTime, nowTime);
				s.setAddTime(addTime);
				
				s.setJoinCount(userRs.getInt("JoinCount"));
				s.setViewCount(userRs.getInt("ViewCount"));
				s.setCommentCount(userRs.getInt("CommentCount"));
				
				shares.add(s);
			}
		} catch (SQLException e) {
			
		}
		request.setAttribute("shares", shares);
		
		//读取我最近的参与
		//暂定Top 3
		sql = "select top 3 Share.ShareID,Share.StartDate,Share.Title,Share.AddTime,Share.JoinCount," +
				"Share.ViewCount,Share.CommentCount " +
				"from [Join] right join Share on ([Join].ShareID=Share.ShareID) where [Join].UserID=";
		sql += curId;
		sql += " order by Share.AddTime desc";
		userRs = db.doQuery(sql);
		List<Share> joins = new ArrayList<Share>();
		try {
			while(userRs.next()){
				Share s = new Share();
				s.setId(userRs.getInt("ShareID"));
				timeTmp = userRs.getTimestamp("StartDate");
				String StartDate = dateFormat.format(timeTmp);
				s.setStartDate(StartDate);

				s.setTitle(userRs.getString("Title"));
				
				String addTime;
				String nowTime;
				Timestamp now = new Timestamp(System.currentTimeMillis());
				timeTmp = userRs.getTimestamp("AddTime");
				addTime = fullDateFormat.format(timeTmp);
				nowTime = fullDateFormat.format(now);
				addTime = Tools.getDate(addTime, nowTime);
				s.setAddTime(addTime);
				
				s.setJoinCount(userRs.getInt("JoinCount"));
				s.setViewCount(userRs.getInt("ViewCount"));
				s.setCommentCount(userRs.getInt("CommentCount"));
				
				joins.add(s);
			}
		} catch (SQLException e) {
			
		}
		request.setAttribute("joins", joins);
		
		//读取我最近的围观
		//暂定Top 3
		sql = "select top 3 Share.ShareID,Share.StartDate,Share.Title,Share.AddTime,Share.JoinCount," +
				"Share.ViewCount,Share.CommentCount " +
				"from [View] right join Share on ([View].ShareID=Share.ShareID) where [View].UserID=";
		sql += curId;
		sql += " order by Share.AddTime desc";
		userRs = db.doQuery(sql);
		List<Share> views = new ArrayList<Share>();
		try {
			while(userRs.next()){
				Share s = new Share();
				s.setId(userRs.getInt("ShareID"));
				timeTmp = userRs.getTimestamp("StartDate");
				String StartDate = dateFormat.format(timeTmp);
				s.setStartDate(StartDate);

				s.setTitle(userRs.getString("Title"));
				
				String addTime;
				String nowTime;
				Timestamp now = new Timestamp(System.currentTimeMillis());
				timeTmp = userRs.getTimestamp("AddTime");
				addTime = fullDateFormat.format(timeTmp);
				nowTime = fullDateFormat.format(now);
				addTime = Tools.getDate(addTime, nowTime);
				s.setAddTime(addTime);
				
				s.setJoinCount(userRs.getInt("JoinCount"));
				s.setViewCount(userRs.getInt("ViewCount"));
				s.setCommentCount(userRs.getInt("CommentCount"));
				
				views.add(s);
			}
		} catch (SQLException e) {
			
		}
		request.setAttribute("views", views);
		
		//读取各个活动的照片
		//只读取一个首页图片
		//暂定top 20
		sql = "select top 20 S.ShareID,S.StartDate,S.Location," +
				"SharePhoto.SPID,SharePhoto.PhotoURL,S.PicLastUploadTime " +
				"from (select Share.ShareID,Share.StartDate,Share.PicLastUploadTime,Share.Location " +
				"from Share where (Share.UserID=";
		sql += curId;
		sql += " or Share.ShareID in (select [Join].ShareID from [Join] where [Join].UserID=";
		sql += curId;
		sql += ")) and Share.Status in (1,2))S left join SharePhoto on " +
				"(S.ShareID=SharePhoto.ShareID and SharePhoto.IndexPic=1) ";
		sql += "where SharePhoto.UserId=";
		sql += curId;
		sql += " order by S.PicLastUploadTime desc";
		userRs = db.doQuery(sql);
		List<SharePhoto> lastMonthPics = new ArrayList<SharePhoto>();
		List<SharePhoto> beforeMonthPics = new ArrayList<SharePhoto>();
		String lastMonthPic = "";
		String curMonthPic = "";
		try {
			if(userRs.next()){
				timeTmp = userRs.getTimestamp("PicLastUploadTime");
			    String lastMonthStr = "";
				if (timeTmp != null){
					lastMonthPic = monthDateFormat.format(timeTmp);
					lastMonthPic += "-00 00:00:00";
					Calendar cs = Calendar.getInstance();
				    cs.setTime(fullDateFormat.parse(lastMonthPic));
				    lastMonthStr += cs.get(Calendar.YEAR);
				    lastMonthStr += "年";
				    lastMonthStr += (cs.get(Calendar.MONTH)+1);
				    lastMonthStr += "月";
				}
			    request.setAttribute("lastMonthPicTitle", lastMonthStr);				

				SharePhoto sp = new SharePhoto();
				
				Share s = new Share();
				s.setId(userRs.getInt("ShareID"));
				
				timeTmp = userRs.getTimestamp("StartDate");
				String StartDate = dateFormat.format(timeTmp);
				s.setStartDate(StartDate);
				
				s.setLocation(userRs.getString("Location"));
				
				sp.setShare(s);
				Users u = new Users();
				u.setUserId(curId);
				sp.setUser(u);
				
				sp.setSpId(userRs.getInt("SPID"));
				
				sp.setPhotoURL(userRs.getString("PhotoURL"));
				lastMonthPics.add(sp);
			}
			while(userRs.next()){
				SharePhoto sp = new SharePhoto();
				
				Share s = new Share();
				s.setId(userRs.getInt("ShareID"));
				
				timeTmp = userRs.getTimestamp("StartDate");
				String StartDate = dateFormat.format(timeTmp);
				s.setStartDate(StartDate);
				
				s.setLocation(userRs.getString("Location"));
				
				sp.setShare(s);
				Users u = new Users();u.setUserId(curId);
				sp.setUser(u);
				
				sp.setSpId(userRs.getInt("SPID"));
				
				sp.setPhotoURL(userRs.getString("PhotoURL"));
				
				timeTmp = userRs.getTimestamp("PicLastUploadTime");
				curMonthPic = monthDateFormat.format(timeTmp);
				curMonthPic += "-00 00:00:00";
				if(Tools.outOfDate(lastMonthPic, curMonthPic) == true){	//是一个月以前的
					beforeMonthPics.add(sp);
				}else{													//最近一个月的
					lastMonthPics.add(sp);
				}
			}
		} catch (SQLException e) {
			
		} catch (ParseException e) {
			e.printStackTrace();
		}
		request.setAttribute("lastMonthPics", lastMonthPics);
		request.setAttribute("beforeMonthPics", beforeMonthPics);
		
		//读取活动日记
		//暂定top20
		sql = "select top 20 S.ShareID,S.StartDate,S.Title,ShareLog.SLID," +
				"ShareLog.Title LogTitle,ShareLog.UpdateTime,ShareLog.[Content] " +
				"from (select Share.ShareID,Share.Title,Share.StartDate,Share.AddTime " +
				"from Share where (Share.UserID=";
		sql += curId;
		sql += " or Share.ShareID in (select [Join].ShareID from [Join] where [Join].UserID=";
		sql += curId;
		sql += ")) and Share.Status=2)S left join ShareLog on (S.ShareID=ShareLog.ShareID) ";
		sql += "where ShareLog.UserId=";
		sql += curId;
		sql += " order by ShareLog.UpdateTime desc";
		userRs = db.doQuery(sql);
		List<ShareLog> lastMonthLogs = new ArrayList<ShareLog>();
		List<ShareLog> beforeMonthLogs = new ArrayList<ShareLog>();
		String lastMonthLog = "";
		String curMonthLog = "";
		try {
			if(userRs.next()){
				timeTmp = userRs.getTimestamp("UpdateTime");
				lastMonthLog = monthDateFormat.format(timeTmp);
				lastMonthLog += "-00 00:00:00";
				Calendar cs = Calendar.getInstance();
			    cs.setTime(fullDateFormat.parse(lastMonthLog));
			    String lastMonthStr = "";
			    lastMonthStr += cs.get(Calendar.YEAR);
			    lastMonthStr += "年";
			    lastMonthStr += (cs.get(Calendar.MONTH)+1);
			    lastMonthStr += "月";
			    request.setAttribute("lastMonthLogTitle", lastMonthStr);
			    
			    ShareLog sl = new ShareLog();
				
				Share s = new Share();
				s.setId(userRs.getInt("ShareID"));
				
				timeTmp = userRs.getTimestamp("StartDate");
				String StartDate = dateFormat.format(timeTmp);
				s.setStartDate(StartDate);
				
				s.setTitle(userRs.getString("Title"));
				
				sl.setShare(s);
				
				sl.setSlId(userRs.getInt("SLID"));
				sl.setTitle(userRs.getString("LogTitle"));
				String content = userRs.getString("Content");
				if(content.length() > Config.LOG_SHOW_MAX){
					content = content.substring(0, Config.LOG_SHOW_MAX) + Config.LOG_SHOW_SYMBOL;
				}
				sl.setContent(content);
				
				timeTmp = userRs.getTimestamp("UpdateTime");
				String updateTime = dateFormat.format(timeTmp);
				sl.setUpdateTime(updateTime);
				
				lastMonthLogs.add(sl);
			}
			while(userRs.next()){
				ShareLog sl = new ShareLog();
				
				Share s = new Share();
				s.setId(userRs.getInt("ShareID"));
				
				timeTmp = userRs.getTimestamp("StartDate");
				String StartDate = dateFormat.format(timeTmp);
				s.setStartDate(StartDate);
				
				s.setTitle(userRs.getString("Title"));
				
				sl.setShare(s);
				
				sl.setSlId(userRs.getInt("SLID"));
				sl.setTitle(userRs.getString("LogTitle"));
				String content = userRs.getString("Content");
				if(content.length() > Config.LOG_SHOW_MAX){
					content = content.substring(0, Config.LOG_SHOW_MAX) + Config.LOG_SHOW_SYMBOL;
				}
				sl.setContent(content);
				
				timeTmp = userRs.getTimestamp("UpdateTime");
				curMonthLog = monthDateFormat.format(timeTmp);
				curMonthLog += "-00 00:00:00";
				if(Tools.outOfDate(lastMonthLog, curMonthLog) == true){	//是一个月以前的
					beforeMonthLogs.add(sl);
				}else{													//最近一个月的
					lastMonthLogs.add(sl);
				}
			}
		} catch (SQLException e) {
			
		} catch (ParseException e) {
			e.printStackTrace();
		}
		request.setAttribute("lastMonthLogs", lastMonthLogs);
		request.setAttribute("beforeMonthLogs", beforeMonthLogs);

		af = mapping.findForward("success");
		return af;
	}
}