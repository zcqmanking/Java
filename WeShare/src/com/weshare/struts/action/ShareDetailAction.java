/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.weshare.struts.action;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.weshare.beans.Share;
import com.weshare.beans.ShareComment;
import com.weshare.beans.Users;
import com.weshare.jdbc.dbconn.DBManager;
import com.weshare.struts.form.ShareDetailForm;

/**
 * Creation date: 10-28-2011
 */
public class ShareDetailAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ShareDetailForm shareDetailForm = (ShareDetailForm) form;
		HttpSession session = request.getSession();
		int owner = (Integer) session.getAttribute("curUserId");
		ActionForward af = new ActionForward();
		ActionMessages err = new ActionMessages();
		Timestamp timeTmp;
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd",
				new Locale("zh", "cn"));
		SimpleDateFormat fullDateFormat = new SimpleDateFormat(
				"yyyy-MM-dd HH:mm:ss", new Locale("zh", "cn"));

		// 查询该活动的ID、标题、发表时间、开始时间、结束时间、发布人名称、发布人ID、
		// 来自、参加的人数、围观的人数、活动内容、活动地址、活动经纬度、活动类别、可视权限、
		// 评论总数。
		// 参加人头像、围观人头像、评论内容
		String sql = "select * from Share where ShareID="
				+ shareDetailForm.getSid();
		Share s = new Share();
		DBManager db = new DBManager();
		ResultSet rs = db.doQuery(sql);
		if (rs == null) {
			err.add("commonErr", new ActionMessage("err.db.getShareErr"));
			af = mapping.findForward("error");
		} else
			try {
				if (rs.next()) {
					s.setId(rs.getInt("ShareID"));
					s.setTitle(rs.getString("Title"));

					timeTmp = rs.getTimestamp("AddTime");
					s.setAddTime(fullDateFormat.format(timeTmp));

					timeTmp = rs.getTimestamp("StartDate");
					s.setStartDate(dateFormat.format(timeTmp));

					timeTmp = rs.getTimestamp("EndDate");
					s.setEndDate(dateFormat.format(timeTmp));

					s.setLocation(rs.getString("Location"));
					s.setDetail(rs.getString("Detail"));
					s.setLongitude(rs.getString("Longitude"));
					s.setLatitude(rs.getString("Latitude"));
					s.setJoinCount(rs.getInt("JoinCount"));
					s.setViewCount(rs.getInt("ViewCount"));
					s.setCommentCount(rs.getInt("CommentCount"));
					s.setSubmitFrom(rs.getString("SubmitFrom"));
					s.setStatus(rs.getInt("Status"));

					request.setAttribute("Share", s);

					// 获取发布人的信息
					sql = "select UserName,UserID,Photo from Users where UserID="
							+ shareDetailForm.getUid();
					Users user = new Users();
					ResultSet userRs = db.doQuery(sql);
					if (userRs == null) {
						err.add("commonErr", new ActionMessage(
								"err.db.getShareErr"));
						af = mapping.findForward("error");
					} else {
						if (userRs.next()) {
							user.setUserId(shareDetailForm.getUid());
							user.setUserName(userRs.getString("UserName"));
							user.setPhoto(userRs.getString("Photo"));
							request.setAttribute("AddUser", user);
						}
						// 获取参加人的头像
						sql = "select top 10 Users.UserID,Users.UserName,Users.Photo "
								+ "from [Join] left join Users "
								+ "on([Join].UserID=Users.UserID) where [Join].ShareID="
								+ s.getId();
						List<Users> joinUsers = new ArrayList<Users>();
						ResultSet joinRs = db.doQuery(sql);
						if (joinRs == null) {
							err.add("commonErr", new ActionMessage(
									"err.db.getShareErr"));
							af = mapping.findForward("error");
						} else {
							while (joinRs.next()) {
								Users u = new Users();
								u.setUserId(joinRs.getInt("UserID"));
								u.setUserName(joinRs.getString("UserName"));
								u.setPhoto(joinRs.getString("Photo"));
								joinUsers.add(u);
							}
							request.setAttribute("joinUsers", joinUsers);

							// 获取围观人的头像
							sql = "select top 10 Users.UserID,Users.UserName,Users.Photo "
									+ "from [View] left join Users "
									+ "on([View].UserID=Users.UserID) where [View].ShareID="
									+ s.getId();
							List<Users> viewUsers = new ArrayList<Users>();
							ResultSet viewRs = db.doQuery(sql);
							if (viewRs == null) {
								err.add("commonErr", new ActionMessage(
										"err.db.getShareErr"));
								af = mapping.findForward("error");
							} else {
								while (viewRs.next()) {
									Users u = new Users();
									u.setUserId(viewRs.getInt("UserID"));
									u.setUserName(viewRs.getString("UserName"));
									u.setPhoto(viewRs.getString("Photo"));
									viewUsers.add(u);
								}
								request.setAttribute("viewUsers", viewUsers);

								// 获取评论内容
								sql = "select ShareComment.SCID,ShareComment.UserID,"
										+ "ShareComment.Comment,ShareComment.UpdateTime,"
										+ "Users.UserName,Users.Photo from ShareComment left join Users "
										+ "on (ShareComment.UserID=Users.UserID and ShareComment.ShareID="
										+ s.getId() + ") order by ShareComment.UpdateTime asc";
								List<ShareComment> scList = new ArrayList<ShareComment>();
								ResultSet scRs = db.doQuery(sql);
								if (scRs == null) {
									err.add("commonErr", new ActionMessage(
											"err.db.getShareErr"));
									af = mapping.findForward("error");
								} else {
									while(scRs.next()){
										ShareComment sc = new ShareComment();
										sc.setScId(scRs.getInt("SCID"));
										sc.setShareId(s.getId());
										sc.setComment(scRs.getString("Comment"));
										Users cu = new Users();
										cu.setUserId(scRs.getInt("UserID"));
										cu.setUserName(scRs.getString("UserName"));
										cu.setPhoto(scRs.getString("Photo"));
										sc.setUser(cu);
										
										timeTmp = scRs.getTimestamp("UpdateTime");
										sc.setUpdateTime(fullDateFormat.format(timeTmp));
										
										scList.add(sc);
									}
									request.setAttribute("scList", scList);
								}
							}
						}
					}

					af = mapping.findForward("success");
				} else {
					err.add("commonErr",
							new ActionMessage("err.db.getShareErr"));
					af = mapping.findForward("error");
				}
			} catch (SQLException e) {
				err.add("commonErr", new ActionMessage("err.db.getShareErr"));
				af = mapping.findForward("error");
			}

		saveErrors(request, err);
		return af;
	}
}