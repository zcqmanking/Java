/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.weshare.struts.action;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.URLEncoder;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.actions.DispatchAction;

import com.weshare.beans.Users;
import com.weshare.jdbc.dbconn.DBManager;
import com.weshare.struts.form.GetShareInfoForm;
import com.weshare.util.Tools;

/** 
 * MyEclipse Struts
 * Creation date: 09-14-2011
 */
public class GetShareInfoAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * 获取参加活动的人员
	 */
	public ActionForward getJoinList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		GetShareInfoForm gsiForm = (GetShareInfoForm) form;
		ActionForward af = new ActionForward();
		ActionMessages err = new ActionMessages();
		
		String sql = "";
		sql += "select Users.UserID, Users.UserName,Users.Photo from " +
				"[Join] left join Users on ([Join].UserID = Users.UserID) " +
				"where ShareID=";
		sql += gsiForm.getSid();
		sql += " order by JoinTime desc";
		
		DBManager dbMgr = new DBManager();
		ResultSet rs = dbMgr.doQuery(sql);
		
		List <Users> usersList = new ArrayList<Users>();
		try {
			while(rs.next()){
				Users user = new Users();
				user.setUserId(rs.getInt("UserID"));
				user.setUserName(rs.getString("UserName"));
				user.setPhoto(rs.getString("Photo"));
				usersList.add(user);
			}
			rs.close();
			rs = null;
			dbMgr.close();
		} catch (SQLException e) {
			err.add("queryError", new ActionMessage("err.db.queryError"));
		}
		
		if(err.isEmpty() == false){
			saveErrors(request,err);
		}
		request.setAttribute("users", usersList);
		af = mapping.findForward("success");
		return af;
	}
	
	/**
	 * 获取围观活动的人员
	 */
	public ActionForward getViewList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		GetShareInfoForm gsiForm = (GetShareInfoForm) form;
		ActionForward af = new ActionForward();
		ActionMessages err = new ActionMessages();
		
		String sql = "";
		sql += "select Users.UserID, Users.UserName,Users.Photo from " +
				"[View] left join Users on ([View].UserID = Users.UserID) " +
				"where ShareID=";
		sql += gsiForm.getSid();
		sql += " order by ViewTime desc";
		
		DBManager dbMgr = new DBManager();
		ResultSet rs = dbMgr.doQuery(sql);
		
		List <Users> usersList = new ArrayList<Users>();
		try {
			while(rs.next()){
				Users user = new Users();
				user.setUserId(rs.getInt("UserID"));
				user.setUserName(rs.getString("UserName"));
				user.setPhoto(rs.getString("Photo"));
				usersList.add(user);
			}
			rs.close();
			rs = null;
			dbMgr.close();
		} catch (SQLException e) {
			err.add("queryError", new ActionMessage("err.db.queryError"));
		}
		
		if(err.isEmpty() == false){
			saveErrors(request,err);
		}
		request.setAttribute("users", usersList);
		af = mapping.findForward("success");
		return af;
	}
	
	public ActionForward getRJSON(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		GetShareInfoForm gsiForm = (GetShareInfoForm) form;
		int curId = gsiForm.getUid();
		Timestamp timeTmp;
		SimpleDateFormat dateFormat = new SimpleDateFormat(
				"yyyy-MM-dd", new Locale("zh", "cn"));
		SimpleDateFormat fullDateFormat = new SimpleDateFormat(
				"yyyy-MM-dd HH:mm:ss", new Locale("zh", "cn"));
		
		try {
			PrintWriter out = response.getWriter();
			String sql = "select Share.ShareID,Share.Title,Share.StartDate," +
					"Share.Location,Share.Longitude,Share.Latitude,Share.AddTime " +
					"from Share where (Share.UserID=";
			sql += curId;
			sql += " or Share.ShareID in (select [Join].ShareID from [Join] where [Join].UserID=";
			sql += curId;
//			sql += "))";
			sql += ")) and Share.Status=2";
			DBManager db = new DBManager();
			ResultSet rs = db.doQuery(sql);
			
			out.print("[");
			boolean first = true;
			while(rs.next()){
				if(first == false){
					out.print(",");
				}
				out.print("[\"");
				out.print(rs.getInt("ShareID"));
				out.print("\",\"");
				out.print(URLEncoder.encode(rs.getString("Title"),"UTF-8"));
				out.print("\",\"");
				
				timeTmp = rs.getTimestamp("StartDate");
				String StartDate = dateFormat.format(timeTmp);
				out.print(StartDate);
				out.print("\",\"");
				
				out.print(URLEncoder.encode(rs.getString("Location"),"UTF-8"));
				out.print("\",\"");
				
				out.print(rs.getString("Latitude"));
				out.print("\",\"");
				
				out.print(rs.getString("Longitude"));
				out.print("\",\"");
				
				String addTime;
				String nowTime;
				Timestamp now = new Timestamp(System.currentTimeMillis());
				timeTmp = rs.getTimestamp("AddTime");
				addTime = fullDateFormat.format(timeTmp);
				nowTime = fullDateFormat.format(now);
				addTime = Tools.getDate(addTime, nowTime);
				out.print(addTime);
				
				out.print("\"]");
				
				first = false;
			}
			out.print("]");
			rs.close();
			rs = null;
			db.close();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}
}