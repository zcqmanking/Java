package com.zhaocq.algorithm;

public class Algorithms {

	/**
	 * 冒泡排序
	 * 
	 * @param a
	 *            待排序数组
	 */
	public void BurbleSort(int[] a) {
		for (int i = 0; i < a.length; i++) {
			for (int j = i; j < a.length; j++) {
				// 把最小的放在最前面
				if (a[i] > a[j]) {
					int temp = a[i];
					a[i] = a[j];
					a[j] = temp;
				}
			}
		}
		// 打印结果
		print(a);
	}

	private void print(int[] a) {
		for (int i = 0; i < a.length; i++) {
			System.out.print(a[i] + " ");
		}
		System.out.println("");
	}

	/**
	 * 选择排序。 <br />
	 * 原理：遍历数组，把当前元素视为最小元素，把该元素与其后的元素作比较，如有更小的，就交换元素。
	 * 
	 * @param a
	 *            待排序数组
	 */
	public void ChooseSort(int[] a) {

		for (int i = 0; i < a.length; i++) {
			int min = i;
			for (int j = i + 1; j < a.length; j++) {
				if (a[j] < a[min]) {
					min = j;
				}
			}
			if (min != i) {
				int temp = a[min];
				a[min] = a[i];
				a[i] = temp;
			}
		}
		// 打印结果
		print(a);
	}

	/**
	 * 插入排序。<br />
	 * 原理：前半部分是已排序的数组，遍历后半部分，把每一个元素同之前的每一个元素比较，如果前面的大，就交换值。
	 * 
	 * @param a
	 *            待排序数组
	 */
	public void InsertSort(int[] a) {
		for (int i = 1; i < a.length; i++) {
			int j;
			int t = a[i]; // 暂存待插入的元素
			for (j = i; j > 0 && a[j - 1] > t; j--) {
				a[j] = a[j - 1];
			}
			a[j] = t; // 由于最后有一步j--操作，所有此处应该是a[j]，而不是a[j-1]
		}
		print(a);
	}

	/**
	 * 快速排序
	 * 
	 * @param a
	 *            待排序数组
	 */
	public void QuickSort(int[] a) {

	}
}
