/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.weshare.struts.action;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.weshare.beans.School;
import com.weshare.beans.Share;
import com.weshare.beans.ShareType;
import com.weshare.beans.Users;
import com.weshare.jdbc.dbconn.DBManager;
import com.weshare.util.Common;
import com.weshare.util.Tools;

/**
 * MyEclipse Struts Creation date: 06-04-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/login" name="loginForm" input="/login.jsp"
 *                scope="request" validate="true"
 * @struts.action-forward name="fail" path="/login.jsp"
 * @struts.action-forward name="suucess" path="/myPage.jsp"
 */
public class MyPageAction extends Action {
	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionForward af = new ActionForward();
		boolean bRet = true;
		ActionMessages err = new ActionMessages();
		Users curUser = new Users();
		HttpSession session = request.getSession();
		curUser.setUserId((Integer) session.getAttribute("curUserId"));
		curUser.setUserName((String) session.getAttribute("curUserName"));
		int ps = (Integer)session.getAttribute("pageSize");
		
		DBManager dbMgr = new DBManager();
		
		// 获取网站配置
		bRet = bGetSiteCfg(dbMgr, request);
		// 读取网站配置信息失败
		if (bRet == false) {
			err
					.add("commonErr", new ActionMessage(
							"err.db.siteCfgErr"));
			// 转向一个通用的错误处理页面
			af = mapping.findForward("failPage");
		} else {
			// 获取当前用户相关信息
			bRet = bGetCurUserInfo(dbMgr, request, curUser.getUserId());
			// 获取当前用户信息失败
			if (bRet == false) {
				err.add("commonErr", new ActionMessage(
						"err.db.getCurUserErr"));
				// 转向一个通用的错误处理页面
				af = mapping.findForward("failPage");
			} else {
				// 获取活动的类别
				bRet = bGetShareType(dbMgr, request);
				// 获取活动类别失败
				if (bRet == false) {
					err.add("commonErr", new ActionMessage(
							"err.db.getShareTypeErr"));
					// 转向一个通用的错误处理页面
					af = mapping.findForward("failPage");
				} else {
					// 获取所有用户发表的活动信息
					bRet = Common.getShareList(request, curUser.getUserId(), 0, 1, ps);
					// 获取所有用户活动信息失败
					if (bRet == false) {
						err.add("commonErr", new ActionMessage(
								"err.db.getShareListErr"));
						// 转向一个通用的错误处理页面
						af = mapping.findForward("failPage");
					} else {
						// 获取热门活动
						bRet = bGetHotShare(dbMgr, request, curUser.getUserId());
						// 获取热门活动失败
						if (bRet == false) {
							err.add("commonErr", new ActionMessage(
									"err.db.getHotShareErr"));
							// 转向一个通用的错误处理页面
							af = mapping.findForward("failPage");
						} else {
							// 获取可能感兴趣的活动
							bRet = bGetFavShare(dbMgr, request, curUser.getUserId());
							// 获取感兴趣活动失败
							if (bRet == false) {
								err.add("commonErr", new ActionMessage(
										"err.db.getFavShareErr"));
								// 转向一个通用的错误处理页面
								af = mapping.findForward("failPage");
							} else {
								// 获取可能认识的晒友
								bRet = bGetStranger(dbMgr, request,
										curUser.getUserId());
								// 获取可能认识的晒友失败
								if (bRet == false) {
									err.add("commonErr",
											new ActionMessage("err.db.getStrangerErr"));
									// 转向一个通用的错误处理页面
									af = mapping.findForward("failPage");
								} else {
									af = mapping.findForward("success");
								}
							}
						}
					}
				}
			}
		}

		saveErrors(request, err);
		dbMgr.close();
		return af;
	}

	/**
	 * 获取网站配置相关信息，将结果放在session中。<br />
	 * 由于session中用户信息过期时将转向首页， 不再需要这些网站配置信息，故将这些网站配置信息放在session中， 减少数据库访问次数。
	 * 
	 * @param dbMgr
	 *            数据库管理类实例
	 * @param request
	 *            HttpServletRequest类实例
	 * @return 读取网站配置信息的结果。true：正确读取；false：读取失败。
	 */
	private boolean bGetSiteCfg(DBManager dbMgr, HttpServletRequest request) {
		boolean bRet = true;
		ResultSet rsSiteCfg;
		String sql = "select URL,WebName,Slogan,AdvURL,CopyRight from Site";
		try {
			rsSiteCfg = dbMgr.doQuery(sql);
			while (rsSiteCfg.next()) {
				HttpSession session = request.getSession();
				session.setAttribute("URL", rsSiteCfg.getString("URL"));
				session.setAttribute("WebName", rsSiteCfg.getString("WebName"));
				session.setAttribute("Slogan", rsSiteCfg.getString("Slogan"));
				session.setAttribute("AdvURL", rsSiteCfg.getString("AdvURL"));
				session.setAttribute("CopyRight", rsSiteCfg
						.getString("CopyRight"));
			}
			rsSiteCfg.close();
			rsSiteCfg = null;
		} catch (SQLException e) {
			bRet = false;
		}
		return bRet;
	}

	/**
	 * 获取当前用户的信息，包括个人数据和最新的一个活动
	 * 
	 * @param dbMgr
	 *            数据库管理类实例
	 * @param request
	 *            HttpServletRequest类实例
	 * @param userId
	 *            用户ID
	 * @return 获取当前用户的信息的结果。true：正确读取；false：读取失败。
	 */
	private boolean bGetCurUserInfo(DBManager dbMgr,
			HttpServletRequest request, int userId) {
		String sql = "";
		boolean bRet = true;

		try {
			sql = "select UserID,UserName,Photo,Users.SchoolID,SchoolName from Users left join School on (Users.SchoolID = School.SchoolID) where UserID="
					+ userId;
			ResultSet userRs = dbMgr.doQuery(sql);
			if (userRs.next()) {
				Users users = new Users();
				users.setUserId(userRs.getInt("UserID"));
				users.setUserName(userRs.getString("UserName"));
				users.setPhoto(userRs.getString("Photo"));
				School school = new School();
				school.setId(userRs.getInt("SchoolID"));
				school.setSchoolName(userRs.getString("SchoolName"));
				users.setSchool(school);
				HttpSession session = request.getSession();
				session.setAttribute("curUser", users);
			}

			// 获取用户最新的一个活动
			sql = "select top 1 * from Share left join ShareType "
					+ "on ShareType.STID = Share.TypeID where Share.UserID = "
					+ userId + " order by Share.AddTime desc";
			ResultSet lastActiveRs = dbMgr.doQuery(sql);
			Timestamp timeTmp;
			SimpleDateFormat dateFormat = new SimpleDateFormat(
					"yyyy-MM-dd", new Locale("zh", "cn"));
			SimpleDateFormat fullDateFormat = new SimpleDateFormat(
					"yyyy-MM-dd HH:mm:ss", new Locale("zh", "cn"));
			if (lastActiveRs.next()) {
				Share share = new Share();
				ShareType shareType = new ShareType();
				share.setId(lastActiveRs.getInt("ShareID"));
				shareType.setId(lastActiveRs.getInt("STID"));
				shareType.setTypeName(lastActiveRs
						.getString("TypeName"));
				share.setShareType(shareType);
				timeTmp = lastActiveRs.getTimestamp("StartDate");
				String StartDate = dateFormat.format(timeTmp);
				share.setStartDate(StartDate);
				timeTmp = lastActiveRs.getTimestamp("EndDate");
				String EndDate = dateFormat.format(timeTmp);
				share.setEndDate(EndDate);
				share.setLocation(lastActiveRs.getString("Location"));
				share.setLongitude(lastActiveRs.getFloat("Longitude"));
				share.setLatitude(lastActiveRs.getFloat("Latitude"));
				share.setDetail(lastActiveRs.getString("Detail"));
				share.setJoinCount(lastActiveRs.getInt("JoinCount"));
				share.setViewCount(lastActiveRs.getInt("ViewCount"));
				share.setForwardCount(lastActiveRs.getInt("ForwardCount"));
				share.setCommentCount(lastActiveRs.getInt("CommentCount"));
				share.setSubmitFrom(lastActiveRs.getString("SubmitFrom"));
				share.setStatus(lastActiveRs.getInt("Status"));

				String addTime;
				String nowTime;
				Timestamp now = new Timestamp(System.currentTimeMillis());
				timeTmp = lastActiveRs.getTimestamp("AddTime");
				addTime = fullDateFormat.format(timeTmp);
				nowTime = fullDateFormat.format(now);
				addTime = Tools.getDate(addTime, nowTime);
				share.setAddTime(addTime);

				request.setAttribute("lastActive", share);
			}
			userRs.close();
			userRs = null;
			lastActiveRs.close();
			lastActiveRs = null;
		} catch (SQLException e) {
			bRet = false;
		}
		return bRet;
	}

	/**
	 * 获取活动类别
	 * 
	 * @param dbMgr
	 *            数据库管理类实例
	 * @param request
	 *            HttpServletRequest类实例
	 * @return 获取活动类别的结果。true：正确读取；false：读取失败。
	 */
	private boolean bGetShareType(DBManager dbMgr, HttpServletRequest request) {
		boolean bRet = true;
		ResultSet rsShareType;
		String sql = "select STID,TypeName from ShareType";
		try {
			rsShareType = dbMgr.doQuery(sql);
			List<ShareType> shareType = new ArrayList<ShareType>();
			while (rsShareType.next()) {
				ShareType st = new ShareType();
				st.setId(rsShareType.getInt("STID"));
				st.setTypeName(rsShareType.getString("TypeName"));
				shareType.add(st);
			}
			request.setAttribute("shareType", shareType);
			rsShareType.close();
			rsShareType = null;
		} catch (SQLException e) {
			bRet = false;
		}
		return bRet;
	}

	/**
	 * 获取前六名最热门的活动。<br />
	 * 可以取得对所有地盘开放或者对当前用户地盘开放的热门活动。<br />
	 * 热门活动是还可以让别人参加且没有结束的活动。<br />
	 * 热门的标准是：参与人数和围观人数之和最多。
	 * 
	 * @param dbMgr
	 *            数据库管理类实例
	 * @param request
	 *            HttpServletRequest类实例
	 * @param userId
	 *            用户ID
	 * @return 获取活动的结果。true：正确读取；false：读取失败。
	 */
	private boolean bGetHotShare(DBManager dbMgr, HttpServletRequest request,
			int userId) {
		boolean bRet = true;
		SimpleDateFormat tempDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String now = tempDate.format(new Date());
		String sql = "select top 6 * from ShareType right join Share on (ShareType.STID = Share.TypeID) "
				+ "left join School on (Share.SchoolID = School.SchoolID) "
				+ "where (Share.SchoolID = 1 or "
				+ "Share.SchoolID = (select SchoolID from Users where UserID="
				+ userId
				+ ")) and Share.Status=0 and datediff(s,'"
				+ now
				+ "',Share.StartDate)>0 order by JoinCount+ViewCount desc";
		ResultSet rsHot = dbMgr.doQuery(sql);
		List<Share> sl = new ArrayList<Share>();
		Timestamp timeTmp;
		SimpleDateFormat dateFormat = new SimpleDateFormat(
				"yyyy-MM-dd HH:mm:ss", new Locale("zh", "cn"));
		try {
			while (rsHot.next()) {
				Share s = new Share();
				s.setId(rsHot.getInt("ShareID"));
				s.setLocation(rsHot.getString("Location"));
				s.setDetail(rsHot.getString("Detail"));

				timeTmp = rsHot.getTimestamp("StartDate");
				String startDate = dateFormat.format(timeTmp);
				s.setStartDate(startDate);

				timeTmp = rsHot.getTimestamp("EndDate");
				String endDate = dateFormat.format(timeTmp);
				s.setStartDate(endDate);

				ShareType st = new ShareType();
				st.setTypeName(rsHot.getString("TypeName"));
				s.setShareType(st);

				sl.add(s);
			}
			if (!sl.isEmpty()) {
				request.setAttribute("hotShare", sl);
			}
			rsHot.close();
			rsHot = null;
		} catch (SQLException e) {
			bRet = false;
		}
		return bRet;
	}

	/**
	 * 获取用户可能感兴趣的活动<br />
	 * 根据用户想去的地方以及用户最常发布的活动的类型， 按照发布时间倒序，筛选对当前用户地盘开放或者对所有地盘开放的前6条。
	 * 
	 * @param dbMgr
	 *            数据库管理类实例
	 * @param request
	 *            HttpServletRequest类实例
	 * @param userId
	 *            用户ID
	 * @return 获取用户感兴趣活动的结果。true：正确读取；false：读取失败。
	 */
	private boolean bGetFavShare(DBManager dbMgr, HttpServletRequest request,
			int userId) {
		boolean bRet = true;
		SimpleDateFormat tempDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String now = tempDate.format(new Date());
		String sql = "select top 6 * from ShareType right join Share on (ShareType.STID = Share.TypeID) "
				+ "left join School on (Share.SchoolID = School.SchoolID) "
				+ "where (Share.SchoolID = 1 or Share.SchoolID = (select SchoolID from Users where UserID="
				+ userId
				+ ")) and Share.Status=0 and datediff(s,'"
				+ now
				+ "',Share.StartDate)>0 and "
				+ "((Location in (select FavLocation from FavLocation where FavLocation.UserID="
				+ userId
				+ " and FavLocation.Status=0)) or Share.TypeID in "
				+ "(select TypeID from Share where UserID="
				+ userId
				+ " group by TypeID having count(*)>3))order by Share.AddTime desc";
		ResultSet rsFav = dbMgr.doQuery(sql);
		List<Share> sl = new ArrayList<Share>();
		Timestamp timeTmp;
		SimpleDateFormat dateFormat = new SimpleDateFormat(
				"yyyy-MM-dd HH:mm:ss", new Locale("zh", "cn"));

		try {
			while (rsFav.next()) {
				Share s = new Share();
				s.setId(rsFav.getInt("ShareID"));
				s.setLocation(rsFav.getString("Location"));
				s.setDetail(rsFav.getString("Detail"));

				timeTmp = rsFav.getTimestamp("StartDate");
				String startDate = dateFormat.format(timeTmp);
				s.setStartDate(startDate);

				timeTmp = rsFav.getTimestamp("EndDate");
				String endDate = dateFormat.format(timeTmp);
				s.setStartDate(endDate);

				ShareType st = new ShareType();
				st.setTypeName(rsFav.getString("TypeName"));
				s.setShareType(st);

				sl.add(s);
			}
			if (!sl.isEmpty()) {
				request.setAttribute("favShare", sl);
			}
			rsFav.close();
			rsFav = null;
		} catch (SQLException e) {
			bRet = false;
		}
		return bRet;
	}

	/**
	 * 获取可能认识的人。<br />
	 * 根据与当前用户共同好友最多的原则，筛选与当前用户共同好友最多的前两个人。
	 * 
	 * @param dbMgr
	 *            数据库管理类实例
	 * @param request
	 *            HttpServletRequest类实例
	 * @param userId
	 *            用户ID
	 * @return 获取可能认识的人的结果。true：正确读取；false：读取失败。
	 */
	private boolean bGetStranger(DBManager dbMgr, HttpServletRequest request,
			int userId) {
		boolean bRet = true;

		return bRet;
	}
}